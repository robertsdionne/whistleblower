// main global script file

int last_update_time = 0;
int update_interval = 15;
bool police = false;
bool started_encrypt_command = false;
String old_text;


// Called when the game starts, before the first room is loaded
function game_start() {
  mouse.Mode = eModePointer;
  
  DocumentSaveButton1.Visible = false;
  DocumentSaveButton2.Visible = false;
  DocumentSaveButton3.Visible = false;
  DocumentSaveButton4.Visible = false;
  SaveProfileButton1.Visible = false;
  SaveProfileButton2.Visible = false;
  SaveProfileButton3.Visible = false;
  SaveProfileButton4.Visible = false;
  SaveProfileButton5.Visible = false;
  SaveProfileButton6.Visible = false;
  SaveProfileButton7.Visible = false;
  SaveProfileButton8.Visible = false;
  SaveProfileButton9.Visible = false;
  SaveProfileButton10.Visible = false;
  SaveProfileSummaryButton.Visible = false;
  
  WorkPrevButton1.Enabled = false;
  WorkNextButton11.Enabled = false;
  WorkDenyButton1.Enabled = false;
  WorkApproveButton1.Enabled = false;
  WorkDenyButton2.Enabled = false;
  WorkApproveButton2.Enabled = false;
  WorkDenyButton3.Enabled = false;
  WorkApproveButton3.Enabled = false;
  WorkDenyButton4.Enabled = false;
  WorkApproveButton4.Enabled = false;
  SaveProfileButton5.Enabled = false;
  SaveProfileButton6.Enabled = false;
  SaveProfileButton7.Enabled = false;
  SaveProfileButton8.Enabled = false;
  SaveProfileButton9.Enabled = false;
  SaveProfileButton10.Enabled = false;
  SaveProfileSummaryButton.Enabled = false;
  invCustomInv.ItemWidth = 80;
  invCustomInv.ItemHeight = 80;
  old_text = "";
  ComputerHum.Play(eAudioPriorityNormal, eRepeat);
}


function RemoveAllItems() {
  int i = 1;
  while (i < 7 + 1) {
    player.LoseInventory(inventory[i]);
    i++;
  }
}


function SignIn(GUI *theGui, int view) {
  DialogBox.Visible = true;
  theGui.LockView(view);
  theGui.Animate(0, 5, eOnce, eBlock, eForwards);
}


function Chat(GUI *theGui) {
  theGui.Animate(1, 5, eRepeat, eNoBlock, eForwards);
}


function SignOut(GUI *theGui) {
  DialogBox.Visible = false;
  theGui.Animate(0, 5, eOnce, eBlock, eBackwards);
  theGui.UnlockView(true);
}


function MaybePolice() {
  DateTime *now = DateTime.Now;
  if (police && last_update_time + update_interval < now.RawTime) {
    police = false;
    OpenChat();
    Chat2.Visible = true;
    SignIn(Chat2, JUSTINVIEW);
    Chat(Chat2);
    Justin9.Start();
  }
}


function SaveToUsbWithDescription(InventoryItem *item, GUIControl *button, String description) {
  if (EncryptedArchive != item && Archive != item) {
    archived_items++;
  }
  player.LoseInventory(item);
  player.AddInventory(item);
  button.Enabled = false;
  int minimum_x = mouse.x + 16;
  if (System.ScreenWidth - 256 < minimum_x) {
    minimum_x = System.ScreenWidth - 256;
  }
  Wait(1);
  DisplayAt(minimum_x, mouse.y - 16, 256, "Saved %s to USB drive.", description);
}


function SaveToUsb(InventoryItem *item,  GUIControl *button) {
  SaveToUsbWithDescription(item, button, item.GetTextProperty("description"));
}


function SaveDocumentToUsb(GUIControl *button) {
  saved_documents++;
  String description = "Document";
  if (saved_documents > 1) {
    description = String.Format("%d Documents", saved_documents);
  }
  SaveToUsbWithDescription(DocumentItem1, button, description);
}


function SaveProfileToUsb(GUIControl *button) {
  saved_profiles++;
  String description = "Profile";
  if (saved_profiles > 1) {
    description = String.Format("%d Profiles", saved_profiles);
  }
  SaveToUsbWithDescription(ProfileItem1, button, description);
}


function MaybeType() {
  // Respond to Return key
  if (IsKeyPressed(eKeyReturn) && !String.IsNullOrEmpty(TerminalCommand.Text)) {
    if (!started_encrypt_command) {
      if (0 == TerminalCommand.Text.CompareTo("ls") || 0 == TerminalCommand.Text.CompareTo("dir")) {
        TerminalOutput.TextColor = 65535;
        if (player.HasInventory(Archive)) {
          TerminalOutput.Text = "/ archive";
        } else if (player.HasInventory(EncryptedArchive)) {
          TerminalOutput.Text = "/ encrypted_archive";
        } else {
          TerminalOutput.Text = "/";
        }
      } else if (0 == TerminalCommand.Text.CompareTo("help")) {
        TerminalOutput.TextColor = 65535;
        TerminalOutput.Text = "clear cls dir encrypt exit help ls";
      } else if (0 == TerminalCommand.Text.CompareTo("clear") || 0 == TerminalCommand.Text.CompareTo("cls")) {
        TerminalOutput.Text = "";
      } else if (0 == TerminalCommand.Text.CompareTo("exit")) {
        HideAll();
      } else if (0 == TerminalCommand.Text.CompareTo("encrypt") || 0 == TerminalCommand.Text.CompareTo("encrypt ") || 0 == TerminalCommand.Text.CompareTo("encrypt  ") || 0 == TerminalCommand.Text.CompareTo("encrypt   ")) {
        TerminalOutput.TextColor = 65535;
        TerminalOutput.Text = "encrypt: needs file argument!";
      } else if (TerminalCommand.Text.StartsWith("encrypt ") && 0 != TerminalCommand.Text.CompareTo("encrypt archive")) {
        TerminalOutput.TextColor = 65535;
        TerminalOutput.Text = String.Format("encrypt: file %s not found!", TerminalCommand.Text.Substring(8, TerminalCommand.Text.Length - 8));
      } else if (0 == TerminalCommand.Text.CompareTo("encrypt archive")) {
        if (player.HasInventory(Archive)) {
          TerminalOutput.TextColor = 65535;
          TerminalOutput.Text = "Enter passcode:";
          started_encrypt_command = true;
        } else {
          TerminalOutput.TextColor = 64528;
          TerminalOutput.Text = "No archive to encrypt!";
        }
      } else {
        TerminalOutput.TextColor = 64528;
        TerminalOutput.Text = String.Format("Unknown command: %s", TerminalCommand.Text.Truncate(13));
      } 
    } else if (0 == TerminalCommand.Text.CompareTo("DELTA", true)) {
      TerminalOutput.TextColor = 65535;
      TerminalOutput.Text = "Success!";
      player.LoseInventory(Archive);
      SaveToUsb(EncryptedArchive, InventoryEncryptButton);
      started_encrypt_command = false;
    } else {
      TerminalOutput.TextColor = 64528;
      TerminalOutput.Text = String.Format("Invalid passcode: %s", TerminalCommand.Text.Truncate(13));
      started_encrypt_command = false;
    }
    TerminalCommand.Text = "";
  }
  if (old_text != TerminalCommand.Text) {
    Type.Play();
    old_text = TerminalCommand.Text;
  }
}


function repeatedly_execute() {
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  
  MaybePolice();
  MaybeType();
  
  if (IsGamePaused() == 1) return;

  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
}


function repeatedly_execute_always() {
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.  
  
  InventoryArchiveButton.Enabled = player.HasInventory(Letter) && player.HasInventory(TicketItem) &&
      player.HasInventory(DocumentItem1);
  InventoryEncryptButton.Enabled = player.HasInventory(Archive);
  
  // Horace dialog options
  if (!player.HasInventory(Archive)) {
    Horace8.SetOptionState(1, eOptionOn);
    Horace8.SetOptionState(2, eOptionOff);
  } else {
    Horace8.SetOptionState(1, eOptionOff);
    Horace8.SetOptionState(2, eOptionOn);
  }
  
  // Justin dialog options
  if (!player.HasInventory(Archive) && !player.HasInventory(EncryptedArchive)) {
    Justin7.SetOptionState(1, eOptionOn);
    Justin7.SetOptionState(2, eOptionOff);
  } else {
    Justin7.SetOptionState(1, eOptionOff);
    Justin7.SetOptionState(2, eOptionOn);
  }
  
  // Celine dialog options
  if (!player.HasInventory(Archive) && !player.HasInventory(EncryptedArchive)) {
    Celine7.SetOptionState(1, eOptionOn);
  } else {
    Celine7.SetOptionState(1, eOptionOff);
  }
  if (player.HasInventory(Archive)) {
    Celine7.SetOptionState(2, eOptionOn);
  } else {
    Celine7.SetOptionState(2, eOptionOff);
  }
  if (player.HasInventory(EncryptedArchive)) {
    Celine7.SetOptionState(3, eOptionOn);
  } else {
    Celine7.SetOptionState(3, eOptionOff);
  }
}


function LoginButton_OnClick(GUIControl *control, MouseButton button) {
  MaybeLogin();
}


function show_inventory_window() {
  Inventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeInteract;
  // But, override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}


function on_event(EventType event, int data) {
  if (eEventGUIMouseDown == event && 1 != data) {
    Type.Play();
  }
}


// Called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  Type.Play();
  // The following is called before "if game is paused keycode=0", so
  // it'll happen even when the game is paused.

  if (IsGamePaused() || (IsInterfaceEnabled() == 0)) {
    // If the game is paused with a modal GUI on the
    // screen, or the player interface is disabled in
    // a cut scene, ignore any keypresses.
    return;
  }
  
  if (keycode == eKeyZ) {
    DisplayAt(mouse.x, mouse.y, 200, String.Format("%d, %d", mouse.x, mouse.y));
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyCtrlQ)  QuitGame(1);   // Ctrl-Q
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click our mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    ProcessClick(mouse.x, mouse.y, eModeWalkto); 
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}


function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}


function btnInvUp_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollUp();
}


function btnInvDown_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollDown();
}


function btnInvOK_Click(GUIControl *control, MouseButton button) {
	// They pressed the OK button, close the GUI
	Inventory.Visible = false;
  //mouse.UseDefaultGraphic();
}


function btnInvSelect_Click(GUIControl *control, MouseButton button) {
	// They pressed SELECT, so switch to the Get cursor
	mouse.Mode = eModeInteract;
	// But, override the appearance to look like the arrow
	mouse.UseModeGraphic(eModePointer);
}


function btnIconInv_Click(GUIControl *control, MouseButton button) {
  show_inventory_window();
}


function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  if (player.ActiveInventory != null)
    mouse.Mode = eModeUseinv;
}


function cEgo_Look() {
  Display("Damn, I'm looking good!");
}


function cEgo_Interact() {
  Display("You rub your hands up and down your clothes.");
}


function cEgo_Talk() {
  Display("Talking to yourself is a sign of madness!");
}


function dialog_request(int param)  {
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
}


function CloseButton_OnClick(GUIControl *control, MouseButton button) {
  control.OwningGUI.Visible = false;
}


function Raise_OnClick(GUI *theGui, MouseButton button) {
  if (!Quit.Visible) {
    Raise(theGui);
  }
}


function RaiseMail_OnClick(GUI *theGui, MouseButton button) {
  if (!Quit.Visible) {
    Raise(Mail1);
    Mail2.ZOrder = z_index;
  }
}


function SwitchMail(GUIControl *control, GUI *next) {
  CloseButton_OnClick(control, eMouseLeft);
  Mail = next;
  Mail.Visible = true;
}


function MailNextButton1_OnClick(GUIControl *control, MouseButton button) {
  SwitchMail(control, Mail2);
  knowledge = true;
}


function MailPrevButton2_OnClick(GUIControl *control, MouseButton button) {
  SwitchMail(control, Mail1);
}


function MailSaveButton_OnClick(GUIControl *control, MouseButton button) {
  SaveToUsb(Letter, control);
  MailSaveButton1.Enabled = false;
  MailSaveButton2.Enabled = false;
}


function DocumentSaveButton_OnClick(GUIControl *control, MouseButton button) {
  SaveDocumentToUsb(control);
}


function SwitchWork(GUIControl *control, GUI *next) {
  CloseButton_OnClick(control, eMouseLeft);
  Work = next;
  Work.Visible = true;
}


function WorkSaveButton_OnClick(GUIControl *control, MouseButton button) {
  SaveProfileToUsb(control);
}


function WorkSummarySaveButton_OnClick(GUIControl *control, MouseButton button) {
  SaveToUsb(ProfileSummaryItem, control);
}


function WorkNextButton1_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work2);
}


function WorkPrevButton2_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work1);
}


function WorkNextButton2_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work3);
}


function WorkPrevButton3_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work2);
}


function WorkNextButton3_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work4);
}


function WorkPrevButton4_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work3);
}


function WorkNextButton4_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work5);
}


function WorkPrevButton5_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work4);
}


function WorkNextButton5_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work6);
}

function WorkPrevButton6_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work5);
}


function WorkNextButton6_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work7);
}


function WorkPrevButton7_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work6);
}

function WorkNextButton7_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work8);
}


function WorkPrevButton8_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work7);
}


function WorkNextButton8_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work9);
}


function WorkPrevButton9_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work8);
}


function WorkNextButton9_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work10);
}


function WorkPrevButton10_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work9);
}


function WorkNextButton10_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control,  Work11);
}


function WorkPrevButton11_OnClick(GUIControl *control, MouseButton button) {
  SwitchWork(control, Work10);
}


function TicketPrintButton_OnClick(GUIControl *control, MouseButton button) {
  Print.PlayQueued();
  TicketPrintButton.Enabled = false;
  DisplayAt(mouse.x + 16,  mouse.y - 16, 200, "Ticket Printed.");
}


function TicketSaveButton_OnClick(GUIControl *control, MouseButton button) {
  SaveToUsb(TicketItem, control);
}


function StartPoliceTimer() {
  DateTime *now = DateTime.Now;
  last_update_time = now.RawTime;
  police = true;
  justin_chat_state = Justin8.ID;
  object[8].Graphic = 231;
  object[8].Clickable = false;
  object[10].Graphic = 231;
  object[10].Clickable = false;
}


function SaveHoraceChatState(Dialog *theDialog) {
  horace_chat_state = theDialog.ID;
}


function ResumeHoraceChatState() {
  dialog[horace_chat_state].Start();
}


function SaveJustinChatState(Dialog *theDialog) {
  justin_chat_state = theDialog.ID;
}


function ResumeJustinChatState() {
  dialog[justin_chat_state].Start();
}


function SaveCelineChatState(Dialog *theDialog) {
  celine_chat_state = theDialog.ID;
}


function ResumeCelineChatState() {
  dialog[celine_chat_state].Start();
}


function WorkDenyButton_OnClick(GUIControl *control, MouseButton button) {
  control.OwningGUI.Controls[3].Enabled = false;
  control.OwningGUI.Controls[4].Enabled = false;
  control.OwningGUI.Controls[5].AsLabel.TextColor = 49152;
  control.OwningGUI.Controls[5].AsLabel.Text = "Denied";
  control.OwningGUI.Controls[6].Enabled = true;
  denied += 1;
  WorkDeniedSummaryLabel.Text = String.Format("%d", denied);
  SaveProfileSummaryButton.Enabled = denied + approved >= 10;
  knowledge = true;
}


function WorkApproveButton_OnClick(GUIControl *control, MouseButton button) {
  control.OwningGUI.Controls[3].Enabled = false;
  control.OwningGUI.Controls[4].Enabled = false;
  control.OwningGUI.Controls[5].AsLabel.TextColor = 2016;
  control.OwningGUI.Controls[5].AsLabel.Text = "Approved";
  control.OwningGUI.Controls[6].Enabled = true;
  approved += 1;
  WorkApprovedSummaryLabel.Text = String.Format("%d", approved);
  SaveProfileSummaryButton.Enabled = denied + approved >= 10;
  knowledge = true;
}


function InventoryArchiveButton_OnClick(GUIControl *control, MouseButton button) {
  RemoveAllItems();
  SaveToUsb(Archive, InventoryArchiveButton);
}


function InventoryEncryptButton_OnClick(GUIControl *control, MouseButton button) {
  OpenTerminal();
}


function LogoutButton_OnClick(GUIControl *control, MouseButton button) {
  Raise_OnClick(Quit, button);
  Quit.Centre();
  Quit.Visible = true;
}


function FadeTransition() {
  SetNextScreenTransition(eTransitionInstant);
  FadeOut(5);
}


function FadeWaitTransition() {
  SetNextScreenTransition(eTransitionInstant);
  FadeOut(5);
  Wait(3*35);
}


function TerribleEnding() {
  HideAll();
  ForcedShutdown.Play();
  mouse.Visible = false;
  FadeTransition();
  player.ChangeRoom(3);
}


function OkEnding() {
  HideAll();
  mouse.Visible = false;
  FadeWaitTransition();
  player.ChangeRoom(4);
}


function NeutralEnding() {
  HideAll();
  mouse.Visible = false;
  FadeTransition();
  player.ChangeRoom(5);
}


function GreatEnding() {
  HideAll();
  mouse.Visible = false;
  FadeWaitTransition();
  player.ChangeRoom(6);
}


function QuitButton_OnClick(GUIControl *control, MouseButton button) {
  HideAll();
  ForcedShutdown.Play();
  mouse.Visible = false;
  FadeTransition();
  player.ChangeRoom(5);
}


function PlayButton_OnClick(GUIControl *control, MouseButton button) {
  Quit.Visible = false;
}


function cNewsFeed_AnyClick() {
  HideAll();
  Logout.Visible = true;
  MaybeShowNews();
}
